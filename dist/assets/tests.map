{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","growlapse-client/tests/app.lint-test.js","growlapse-client/tests/helpers/destroy-app.js","growlapse-client/tests/helpers/module-for-acceptance.js","growlapse-client/tests/helpers/resolver.js","growlapse-client/tests/helpers/start-app.js","growlapse-client/tests/test-helper.js","growlapse-client/tests/tests.lint-test.js","growlapse-client/tests/unit/controllers/create-test.js","growlapse-client/tests/unit/controllers/timelapses-test.js","growlapse-client/tests/unit/models/timelapses-test.js","growlapse-client/tests/unit/routes/create-test.js","growlapse-client/tests/unit/routes/timelapses-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('growlapse-client/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/create.js should pass ESLint\\n\\n6:15 - \\'$\\' is not defined. (no-undef)\\n7:17 - \\'$\\' is not defined. (no-undef)\\n8:19 - \\'$\\' is not defined. (no-undef)\\n21:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n22:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n23:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n24:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n24:37 - \\'response\\' is defined but never used. (no-unused-vars)\\n25:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n26:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n27:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n30:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('controllers/timelapses.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/timelapses.js should pass ESLint\\n\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n18:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n30:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n31:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('models/timelapses.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/timelapses.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/timelapses.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/timelapses.js should pass ESLint\\n\\n');\n  });\n});","define('growlapse-client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n  }\n});","define('growlapse-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'growlapse-client/tests/helpers/start-app', 'growlapse-client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = _ember.default.RSVP.resolve;\n});","define('growlapse-client/tests/helpers/resolver', ['exports', 'growlapse-client/resolver', 'growlapse-client/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('growlapse-client/tests/helpers/start-app', ['exports', 'ember', 'growlapse-client/app', 'growlapse-client/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = _ember.default.merge({}, _environment.default.APP);\n    attributes = _ember.default.merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember.default.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('growlapse-client/tests/test-helper', ['growlapse-client/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('growlapse-client/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/timelapses-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/timelapses-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/timelapses-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/timelapses-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/timelapses-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/timelapses-test.js should pass ESLint\\n\\n');\n  });\n});","define('growlapse-client/tests/unit/controllers/create-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:create', 'Unit | Controller | create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('growlapse-client/tests/unit/controllers/timelapses-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:timelapses', 'Unit | Controller | timelapses', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('growlapse-client/tests/unit/models/timelapses-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('timelapses', 'Unit | Model | timelapses', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('growlapse-client/tests/unit/routes/create-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:create', 'Unit | Route | create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('growlapse-client/tests/unit/routes/timelapses-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:timelapses', 'Unit | Route | timelapses', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('growlapse-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}